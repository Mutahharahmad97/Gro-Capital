{"ast":null,"code":"var _jsxFileName = \"/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/pages/settings_page/accountInformationForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from \"react\";\nimport { AppControlContext } from \"../../context/AppControlContext\";\nimport FormInput from \"../../components/Form/FormInput\";\nimport { baseUrl } from \"../../services/util/baseUrl\";\nimport { GET_ALL_DATA_USER_URL } from \"../../services/util/urls\";\nimport updateUser from \"../../services/Dashboard/updateUser\";\nimport updateProfile from \"../../services/Dashboard/updateProfile\";\nimport SelectSearch, { fuzzySearch } from \"react-select-search\";\nimport states from \"../../components/Form/json/states\";\nimport updatePersonalInformation from \"../../services/Dashboard/updatePersonalInformation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccountInformationForm = props => {\n  _s();\n\n  const {\n    Form,\n    setFormState,\n    Form3,\n    setForm3State\n  } = useContext(AppControlContext);\n  const [updateSuccessState, setupdateSuccessState] = useState(false);\n  const [formValidation, setFormValidation] = useState({\n    PersonalPhoneValidate: true,\n    EmailValidate: true,\n    dataFetched: false\n  });\n  const [wholeFormValidated, setWholeFormValidated] = useState(true);\n  const [apiErrorState, setApiErrorState] = useState(false);\n  const [apiErrorMessage, setApiErrorMessage] = useState('');\n\n  const updateFieldValue = e => {\n    setFormState({ ...Form,\n      [e.target.name]: e.target.value\n    });\n    setForm3State({ ...Form3,\n      [e.target.name]: e.target.value\n    });\n\n    switch (e.target.name) {\n      case \"Email\":\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z-]+(?:\\.[a-zA-Z-]+)*$/.test(e.target.value) && e.target.value.length > 0 ? setFormValidation({ ...formValidation,\n          EmailValidate: true\n        }) : setFormValidation({ ...formValidation,\n          EmailValidate: false\n        });\n        break;\n    }\n  };\n\n  const selectSearch = value => {\n    setForm3State({ ...Form3,\n      State: value\n    });\n  };\n\n  const updatePhoneField = e => {\n    if (/^\\d{0,10}$/.test(e.target.value)) {\n      setFormState({ ...Form,\n        [e.target.name]: e.target.value\n      });\n      /^[1-9]{1}[0-9]*$/.test(e.target.value) || e.target.value.length === 0 ? setFormValidation({ ...formValidation,\n        PersonalPhoneValidate: true\n      }) : setFormValidation({ ...formValidation,\n        PersonalPhoneValidate: false\n      });\n    }\n\n    ;\n  };\n\n  const updateZipField = e => {\n    if (/^\\d{0,5}$/.test(e.target.value)) {\n      setForm3State({ ...Form3,\n        [e.target.name]: e.target.value\n      });\n      /^\\d{5}$/.test(e.target.value) || e.target.value.length === 0 ? setFormValidation({ ...formValidation,\n        ZipValidate: true\n      }) : setFormValidation({ ...formValidation,\n        ZipValidate: false\n      });\n    }\n\n    ;\n  };\n\n  useEffect(() => {\n    const mapAllUserDataToContext = async data => {\n      setFormState({ ...Form,\n        FName: data.first_name,\n        LName: data.last_name,\n        Email: data.email,\n        Phone: data.phone\n      });\n      setForm3State({ ...Form3,\n        SocialSecurityNumber: data.social_security_number,\n        PersonalPhysicalAddress: data.personal_physical_address,\n        HomeAddress1: data.home_address_1,\n        HomeAddress2: data.home_address_2,\n        City: data.city,\n        State: data.personal_info_state,\n        Zip: data.zip,\n        TotalMonthlyExpenses: data.total_monthly_expenses,\n        TotalMonthlyIncome: data.total_monthly_income,\n        Birthday: data.birthday\n      });\n    };\n\n    if (!formValidation.dataFetched) {\n      fetch(baseUrl() + GET_ALL_DATA_USER_URL, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${localStorage.getItem(\"token\")}`\n        }\n      }).then(res => res.json()).then(response => {\n        setFormValidation({ ...formValidation,\n          dataFetched: true\n        });\n        mapAllUserDataToContext(response);\n      }).catch(err => console.log(err));\n    }\n  }, [Form, setFormState, formValidation, setForm3State, Form3]);\n\n  const updateAccountInfo = async () => {\n    if (formValidation.PersonalPhoneValidate && formValidation.EmailValidate) {\n      const accountInformation = await updateUser(Form);\n      const phoneInfo = await updateProfile(Form.Phone);\n      const personalInfo = await updatePersonalInformation(Form3);\n\n      if (accountInformation && phoneInfo && personalInfo) {\n        setupdateSuccessState(true);\n      }\n    } else {\n      setWholeFormValidated(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"settings-pages\",\n    children: [apiErrorState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert--error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: apiErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 19\n    }, this) : updateSuccessState ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert--success\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Successfully Updated\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }, this) : !wholeFormValidated && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert--error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please Fill the whole form correctly!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account_info_heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Account Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"account_info_form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account_info_form__fields\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"#\",\n            className: \"registration\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-name\",\n                title: \"Name\",\n                type: \"text\",\n                name: \"FName\",\n                onchange: updateFieldValue // onkeyup={updateFormFieldOnKeyUp}\n                //   onblur={updateSsnField}\n                ,\n                validate: true //   message=\"The format should be xxx-xx-xxxx\"\n                // value={`${Form.FName} ${Form.LName}`}\n                ,\n                value: Form.FName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-email\",\n                title: \"Email\",\n                type: \"text\",\n                name: \"Email\",\n                onchange: updateFieldValue //   onblur={updateFormField}\n                ,\n                validate: formValidation.EmailValidate,\n                message: \"Email format invalid\",\n                value: Form.Email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-st1\",\n                title: \"Street 1\",\n                type: \"text\",\n                name: \"HomeAddress1\",\n                onchange: updateFieldValue //   onblur={updateTotalMonthlyIncomeField}\n                ,\n                validate: true //   message=\"1200.00 / Numeric value only\"\n                ,\n                value: Form3.HomeAddress1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"reg-tme\",\n                title: \"Street 2\",\n                type: \"text\",\n                name: \"HomeAddress2\" //   onblur={updateTotalMonthlyExpensesField}\n                ,\n                onchange: updateFieldValue,\n                validate: true //   message=\"1200.00 / Numeric value only\"\n                ,\n                value: Form3.HomeAddress2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-city\",\n                title: \"City\",\n                type: \"text\",\n                name: \"City\",\n                onchange: updateFieldValue //   onblur={updateTotalMonthlyExpensesField}\n                ,\n                validate: true //   message=\"1200.00 / Numeric value only\"\n                ,\n                value: Form3.City\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col-12 col-sm-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-group\",\n                  children: /*#__PURE__*/_jsxDEV(SelectSearch, {\n                    options: states,\n                    search: true,\n                    autoComplete: \"null\",\n                    value: Form3.State,\n                    filterOptions: fuzzySearch,\n                    onChange: selectSearch,\n                    placeholder: Form3.State\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-zip\",\n                title: \"Zip\",\n                type: \"number\",\n                name: \"Zip\",\n                onchange: updateZipField //   onblur={updateTotalMonthlyExpensesField}\n                ,\n                validate: true,\n                class: \"col-sm-3\" //   message=\"1200.00 / Numeric value only\"\n                ,\n                value: Form3.Zip\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n                id: \"set-phone-number\",\n                title: \"Phone\",\n                type: \"number\",\n                name: \"Phone\",\n                onchange: updatePhoneField //   onblur={updateFormField}\n                ,\n                validate: formValidation.PersonalPhoneValidate,\n                message: \"Phone Number not valid. It must contain 10 numbers. Number should not start with zero\",\n                value: Form.Phone,\n                class: \"col-12\",\n                customStyle: {\n                  width: \"100%\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                justifyContent: \"center\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: updateAccountInfo,\n                className: \"btn btn--green account_info_form__btn\",\n                children: \"Update Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AccountInformationForm, \"bsHRndbTT1Pqw3cPG73DM0to70c=\");\n\n_c = AccountInformationForm;\nexport default AccountInformationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountInformationForm\");","map":{"version":3,"sources":["/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/pages/settings_page/accountInformationForm.jsx"],"names":["useContext","useState","useEffect","AppControlContext","FormInput","baseUrl","GET_ALL_DATA_USER_URL","updateUser","updateProfile","SelectSearch","fuzzySearch","states","updatePersonalInformation","AccountInformationForm","props","Form","setFormState","Form3","setForm3State","updateSuccessState","setupdateSuccessState","formValidation","setFormValidation","PersonalPhoneValidate","EmailValidate","dataFetched","wholeFormValidated","setWholeFormValidated","apiErrorState","setApiErrorState","apiErrorMessage","setApiErrorMessage","updateFieldValue","e","target","name","value","test","length","selectSearch","State","updatePhoneField","updateZipField","ZipValidate","mapAllUserDataToContext","data","FName","first_name","LName","last_name","Email","email","Phone","phone","SocialSecurityNumber","social_security_number","PersonalPhysicalAddress","personal_physical_address","HomeAddress1","home_address_1","HomeAddress2","home_address_2","City","city","personal_info_state","Zip","zip","TotalMonthlyExpenses","total_monthly_expenses","TotalMonthlyIncome","total_monthly_income","Birthday","birthday","fetch","method","headers","Authorization","localStorage","getItem","then","res","json","response","catch","err","console","log","updateAccountInfo","accountInformation","phoneInfo","personalInfo","width","display","justifyContent"],"mappings":"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","sourcesContent":["import { useContext, useState, useEffect } from \"react\";\nimport { AppControlContext } from \"../../context/AppControlContext\";\nimport FormInput from \"../../components/Form/FormInput\";\nimport { baseUrl } from \"../../services/util/baseUrl\";\nimport { GET_ALL_DATA_USER_URL } from \"../../services/util/urls\";\nimport updateUser from \"../../services/Dashboard/updateUser\";\nimport updateProfile from \"../../services/Dashboard/updateProfile\";\nimport SelectSearch, { fuzzySearch } from \"react-select-search\";\nimport states from \"../../components/Form/json/states\";\nimport updatePersonalInformation from \"../../services/Dashboard/updatePersonalInformation\";\n\nconst AccountInformationForm = (props) => {\n  const { Form, setFormState, Form3, setForm3State } = useContext(AppControlContext);\n  const [updateSuccessState, setupdateSuccessState] = useState(false);\n  const [formValidation, setFormValidation] = useState({\n    PersonalPhoneValidate: true,\n    EmailValidate: true,\n    dataFetched: false\n  });\n  const [wholeFormValidated, setWholeFormValidated] = useState(true);\n  const [apiErrorState, setApiErrorState] = useState(false);\n  const [apiErrorMessage, setApiErrorMessage] = useState('');\n\n  const updateFieldValue = (e) =>{\n    setFormState({\n      ...Form,\n      [e.target.name]: e.target.value\n    })\n    setForm3State({\n      ...Form3,\n      [e.target.name]: e.target.value\n    })\n\n    switch (e.target.name) {\n      case \"Email\":\n        /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z-]+(?:\\.[a-zA-Z-]+)*$/.test(\n          e.target.value\n        ) && e.target.value.length > 0\n          ? setFormValidation({ ...formValidation, EmailValidate: true })\n          : setFormValidation({ ...formValidation, EmailValidate: false });\n        break;\n  }\n}; \n\n  const selectSearch = (value) => {\n    setForm3State({\n      ...Form3,\n      State: value,\n    });\n  };\n\n  const updatePhoneField = (e) => {\n    if (/^\\d{0,10}$/.test(e.target.value)){\n      setFormState({\n        ...Form,\n        [e.target.name]: e.target.value\n      });\n      /^[1-9]{1}[0-9]*$/.test(e.target.value) || e.target.value.length === 0\n        ? setFormValidation({ ...formValidation, PersonalPhoneValidate: true })\n        : setFormValidation({ ...formValidation, PersonalPhoneValidate: false });\n      \n    };\n  };\n\n  const updateZipField = (e) => {\n    if (/^\\d{0,5}$/.test(e.target.value)){\n      setForm3State({\n        ...Form3,\n        [e.target.name]: e.target.value\n      });\n      /^\\d{5}$/.test(e.target.value) || e.target.value.length === 0\n        ? setFormValidation({ ...formValidation, ZipValidate: true })\n        : setFormValidation({ ...formValidation, ZipValidate: false });\n      \n    };\n  };\n  \n  useEffect(() => {\n    const mapAllUserDataToContext = async (data) => {\n      setFormState({\n        ...Form,\n        FName: data.first_name,\n        LName: data.last_name,\n        Email: data.email,\n        Phone: data.phone\n      });\n      setForm3State({\n        ...Form3,\n        SocialSecurityNumber : data.social_security_number,\n        PersonalPhysicalAddress: data.personal_physical_address,\n        HomeAddress1: data.home_address_1,\n        HomeAddress2: data.home_address_2,\n        City: data.city,\n        State: data.personal_info_state,\n        Zip: data.zip,\n        TotalMonthlyExpenses: data.total_monthly_expenses,\n        TotalMonthlyIncome: data.total_monthly_income,\n        Birthday: data.birthday\n      });\n    };\n\n    if (!formValidation.dataFetched) {\n      fetch(baseUrl() + GET_ALL_DATA_USER_URL, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${localStorage.getItem(\"token\")}`,\n        },\n      })\n        .then((res) => res.json())\n        .then((response) => {\n          setFormValidation({...formValidation ,dataFetched:true})\n          mapAllUserDataToContext(response);\n        })\n        .catch((err) => console.log(err));\n    }\n  }, [\n    Form,\n    setFormState,\n    formValidation,\n    setForm3State,\n    Form3\n  ]);\n\n  const updateAccountInfo = async () => {\n    if (formValidation.PersonalPhoneValidate && formValidation.EmailValidate) {\n      const accountInformation = await updateUser(Form);\n      const phoneInfo = await updateProfile(Form.Phone);\n      const personalInfo = await updatePersonalInformation(Form3)\n\n      if (accountInformation && phoneInfo && personalInfo){\n        setupdateSuccessState(true)\n      }\n    } else{\n      setWholeFormValidated(false);\n    }\n  };\n\n  return (\n    <div id=\"settings-pages\">\n      {apiErrorState ? (\n                  <div className=\"alert alert--error\">\n                    <p>{apiErrorMessage}</p>\n                  </div>\n                ): updateSuccessState ? (\n                  <div className=\"alert alert--success\">\n                    <p>Successfully Updated</p>\n                  </div>):\n                  !wholeFormValidated &&(\n                    <div className=\"alert alert--error\">\n                      <p>Please Fill the whole form correctly!</p>\n                    </div>\n                  )}\n      <div className=\"account_info_heading\">\n          <h1>\n              Account Details\n          </h1>\n        <section className=\"account_info_form\">\n          <div className=\"account_info_form__fields\">\n                <form action=\"#\" className=\"registration\">\n                    <div className=\"row\">\n                      <FormInput\n                        id=\"set-name\"\n                        title=\"Name\"\n                        type=\"text\"\n                        name=\"FName\"\n                        onchange={updateFieldValue}\n                        // onkeyup={updateFormFieldOnKeyUp}\n                        //   onblur={updateSsnField}\n                        validate={true}\n                        //   message=\"The format should be xxx-xx-xxxx\"\n                        // value={`${Form.FName} ${Form.LName}`}\n                        value={Form.FName}\n                      />\n                      <FormInput\n                        id=\"set-email\"\n                        title=\"Email\"\n                        type=\"text\"\n                        name=\"Email\"\n                        onchange={updateFieldValue}\n                        //   onblur={updateFormField}\n                        validate={formValidation.EmailValidate}\n                        message=\"Email format invalid\"\n                        value={Form.Email}\n                      />\n                      <FormInput\n                        id=\"set-st1\"\n                        title=\"Street 1\"\n                        type=\"text\"\n                        name=\"HomeAddress1\"\n                        onchange={updateFieldValue}\n                        //   onblur={updateTotalMonthlyIncomeField}\n                        validate={true}\n                        //   message=\"1200.00 / Numeric value only\"\n                        value={Form3.HomeAddress1}\n                      />\n                      <FormInput\n                        id=\"reg-tme\"\n                        title=\"Street 2\"\n                        type=\"text\"\n                        name=\"HomeAddress2\"\n                        //   onblur={updateTotalMonthlyExpensesField}\n                        onchange={updateFieldValue}\n                        validate={true}\n                        //   message=\"1200.00 / Numeric value only\"\n                        value={Form3.HomeAddress2}\n                      />\n                      <FormInput\n                        id=\"set-city\"\n                        title=\"City\"\n                        type=\"text\"\n                        name=\"City\"\n                        onchange={updateFieldValue}\n                        //   onblur={updateTotalMonthlyExpensesField}\n                        validate={true}\n                        //   message=\"1200.00 / Numeric value only\"\n                        value={Form3.City}\n                      />\n                      <div className=\"col-12 col-sm-3\">\n                    <div className=\"form-group\">\n                        <SelectSearch\n                          options={states}\n                          search\n                          autoComplete=\"null\"\n                          value={Form3.State}\n                          filterOptions={fuzzySearch}\n                          onChange={selectSearch}\n                          placeholder={Form3.State}\n                        />\n                      </div>\n                    </div>\n                      <FormInput\n                        id=\"set-zip\"\n                        title=\"Zip\"\n                        type=\"number\"\n                        name=\"Zip\"\n                        onchange={updateZipField}\n                        //   onblur={updateTotalMonthlyExpensesField}\n                        validate={true}\n                        class=\"col-sm-3\"\n                        //   message=\"1200.00 / Numeric value only\"\n                        value={Form3.Zip}\n                      />\n                      <FormInput\n                            id=\"set-phone-number\"\n                            title=\"Phone\"\n                            type=\"number\"\n                            name=\"Phone\"\n                            onchange={updatePhoneField}\n                            //   onblur={updateFormField}\n                            validate={formValidation.PersonalPhoneValidate}\n                            message=\"Phone Number not valid. It must contain 10 numbers. Number should not start with zero\"\n                            value={Form.Phone}\n                            class=\"col-12\"\n                            customStyle={{ width: \"100%\" }}\n                          />\n                    </div>\n                  <div style={{display:\"flex\",justifyContent:\"center\"}}>\n                    <div\n                      onClick={updateAccountInfo}\n                      className=\"btn btn--green account_info_form__btn\"\n                    >\n                      Update Details\n                    </div>\n                  </div>    \n                </form>\n            </div>\n        </section>\n      </div>\n    </div>\n  )\n}\nexport default AccountInformationForm"]},"metadata":{},"sourceType":"module"}