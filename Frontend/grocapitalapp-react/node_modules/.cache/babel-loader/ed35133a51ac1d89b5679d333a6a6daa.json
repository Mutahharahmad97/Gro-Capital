{"ast":null,"code":"var _jsxFileName = \"/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/pages/settings_page/securityPage.jsx\",\n    _s = $RefreshSig$();\n\nimport FormInput from \"../../components/Form/FormInput\";\nimport { useState } from \"react\";\nimport { baseUrl } from \"../../services/util/baseUrl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SecurityPage = props => {\n  _s();\n\n  const [formValidation, setFormValidation] = useState({\n    PasswordValidate: true,\n    CPasswordValidate: true\n  });\n  const [passwordResetForm, setPasswordResetForm] = useState({\n    OldPassword: \"\",\n    NewPassword: \"\",\n    ConfirmNewPassword: \"\"\n  });\n\n  const updateFormField = e => {\n    setPasswordResetForm({ ...passwordResetForm,\n      [e.target.name]: e.target.value\n    });\n\n    switch (e.target.name) {\n      case \"NewPassword\":\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d][A-Za-z\\d!@#$%^&*()_+]{7,}$/.test(e.target.value) && e.target.value.length > 0 ? setFormValidation({ ...formValidation,\n          PasswordValidate: true\n        }) : setFormValidation({ ...formValidation,\n          PasswordValidate: false\n        });\n        break;\n\n      case \"ConfirmNewPassword\":\n        passwordResetForm.NewPassword === e.target.value ? setFormValidation({ ...formValidation,\n          CPasswordValidate: true\n        }) : setFormValidation({ ...formValidation,\n          CPasswordValidate: false\n        });\n        break;\n\n      default: //Do nothing\n\n    }\n  };\n\n  const updatePassword = async () => {\n    if (formValidation.PasswordValidate && formValidation.CPasswordValidate) {\n      const requestData = {\n        old_password: passwordResetForm.OldPassword,\n        new_password: passwordResetForm.NewPassword\n      };\n      const response = await fetch(baseUrl() + \"auth/settings/reset-password\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify(requestData)\n      });\n\n      if (response.ok) {\n        return {\n          success: true,\n          message: \"success\"\n        };\n      } else if (response.status === 401) {\n        const error = await response.json();\n        return {\n          success: false,\n          message: error.detail\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          message: '\"' + Object.keys(error)[0] + '\": ' + error[Object.keys(error)[0]]\n        };\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"settings-pages\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account_info_heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Security\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"account_info_form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"account_info_form__fields\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"#\",\n          className: \"registration\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(FormInput, {\n              id: \"set-old-password\",\n              title: \"Old password\",\n              type: \"password\",\n              name: \"OldPassword\",\n              onchange: updateFormField // onkeyup={updateFormFieldOnKeyUp}\n              //   onblur={updateSsnField}\n              ,\n              validate: true,\n              class: \"col-12 col-sm-6\" //   message=\"The format should be xxx-xx-xxxx\"\n              // value={`${Form.FName} ${Form.LName}`}\n              ,\n              value: passwordResetForm.OldPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-12 col-sm-6\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n              id: \"set-new-password\",\n              title: \"New password\",\n              type: \"password\",\n              name: \"NewPassword\",\n              onchange: updateFormField //   onblur={updateTotalMonthlyIncomeField}\n              ,\n              validate: formValidation.PasswordValidate,\n              message: \"Password must contain atleast 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character. Password must be atleast 8 characters long\",\n              value: passwordResetForm.NewPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n              id: \"confirm-pass\",\n              title: \"Confirm new password\",\n              type: \"password\",\n              name: \"ConfirmNewPassword\" //onblur={updateTotalMonthlyExpensesField}\n              ,\n              onchange: updateFormField,\n              validate: formValidation.CPasswordValidate,\n              message: \"Password doesn't match\",\n              value: passwordResetForm.ConfirmNewPassword\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              justifyContent: \"center\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              onClick: updatePassword,\n              className: \"btn btn--green account_info_form__btn\",\n              children: \"Change password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SecurityPage, \"TRXH1Xy9l4Yy52WNV3gEmhRrHLM=\");\n\n_c = SecurityPage;\nexport default SecurityPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SecurityPage\");","map":{"version":3,"sources":["/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/pages/settings_page/securityPage.jsx"],"names":["FormInput","useState","baseUrl","SecurityPage","props","formValidation","setFormValidation","PasswordValidate","CPasswordValidate","passwordResetForm","setPasswordResetForm","OldPassword","NewPassword","ConfirmNewPassword","updateFormField","e","target","name","value","test","length","updatePassword","requestData","old_password","new_password","response","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","ok","success","message","status","error","json","detail","Object","keys","display","justifyContent"],"mappings":"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","sourcesContent":["import FormInput from \"../../components/Form/FormInput\"\nimport { useState } from \"react\";\nimport { baseUrl } from \"../../services/util/baseUrl\";\n\nconst SecurityPage = (props) => {\n    const [formValidation, setFormValidation] = useState({\n        PasswordValidate: true,\n        CPasswordValidate: true,\n      });\n    const [passwordResetForm, setPasswordResetForm] = useState({\n        OldPassword:\"\",\n        NewPassword:\"\",\n        ConfirmNewPassword:\"\"\n    })\n    const updateFormField = (e) => {\n        setPasswordResetForm({\n          ...passwordResetForm,\n          [e.target.name]: e.target.value,\n        });\n    \n        switch (e.target.name) {\n          case \"NewPassword\":\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[!@#$%^&*()_+])[A-Za-z\\d][A-Za-z\\d!@#$%^&*()_+]{7,}$/.test(\n              e.target.value\n            ) && e.target.value.length > 0\n              ? setFormValidation({ ...formValidation, PasswordValidate: true })\n              : setFormValidation({ ...formValidation, PasswordValidate: false });\n            break;\n    \n          case \"ConfirmNewPassword\":\n            passwordResetForm.NewPassword === e.target.value\n              ? setFormValidation({ ...formValidation, CPasswordValidate: true })\n              : setFormValidation({ ...formValidation, CPasswordValidate: false });\n            break;\n    \n          default:\n          //Do nothing\n        }\n      };\n      const updatePassword = async () => {\n        if (formValidation.PasswordValidate && formValidation.CPasswordValidate) {\n            const requestData = {\n                old_password:passwordResetForm.OldPassword,\n                new_password:passwordResetForm.NewPassword\n            }\n            const response = await fetch(baseUrl() + \"auth/settings/reset-password\", {\n                method: \"POST\",\n                headers: {\n                  \"Content-Type\": \"application/json\",\n                  Authorization: `Token ${localStorage.getItem(\"token\")}`,\n                },\n                body: JSON.stringify(requestData),\n              });\n            if (response.ok) {\n                return { success: true, message: \"success\" };\n              } else if (response.status === 401) {\n                const error = await response.json();\n                return { success: false, message: error.detail };\n              } else {\n                const error = await response.json();\n                return {\n                  success: false,\n                  message:\n                    '\"' + Object.keys(error)[0] + '\": ' + error[Object.keys(error)[0]],\n                };\n            }\n        }\n      };\n    \n    return(\n        <div id=\"settings-pages\">\n            <div className=\"account_info_heading\">\n                <h1>\n                    Security\n                </h1>\n            </div>\n            <section className=\"account_info_form\">\n          <div className=\"account_info_form__fields\">\n                <form action=\"#\" className=\"registration\">\n                    <div className=\"row\">\n                      <FormInput\n                        id=\"set-old-password\"\n                        title=\"Old password\"\n                        type=\"password\"\n                        name=\"OldPassword\"\n                        onchange={updateFormField}\n                        // onkeyup={updateFormFieldOnKeyUp}\n                        //   onblur={updateSsnField}\n                        validate={true}\n                        class=\"col-12 col-sm-6\"\n                        //   message=\"The format should be xxx-xx-xxxx\"\n                        // value={`${Form.FName} ${Form.LName}`}\n                        value={passwordResetForm.OldPassword}\n                      />\n                      <div className=\"col-12 col-sm-6\"></div>\n                      <FormInput\n                        id=\"set-new-password\"\n                        title=\"New password\"\n                        type=\"password\"\n                        name=\"NewPassword\"\n                        onchange={updateFormField}\n                        //   onblur={updateTotalMonthlyIncomeField}\n                        validate={formValidation.PasswordValidate}\n                        message=\"Password must contain atleast 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character. Password must be atleast 8 characters long\"\n                        value={passwordResetForm.NewPassword}\n                      />\n                      <FormInput\n                        id=\"confirm-pass\"\n                        title=\"Confirm new password\"\n                        type=\"password\"\n                        name=\"ConfirmNewPassword\"\n                        //onblur={updateTotalMonthlyExpensesField}\n                        onchange={updateFormField}\n                        validate={formValidation.CPasswordValidate}\n                        message=\"Password doesn't match\"\n                        value={passwordResetForm.ConfirmNewPassword}\n                      />\n                    </div>\n                  <div style={{display:\"flex\",justifyContent:\"center\"}}>\n                    <div\n                        onClick={updatePassword}\n                        className=\"btn btn--green account_info_form__btn\"\n                    >\n                      Change password\n                    </div>\n                  </div>    \n                </form>\n            </div>\n        </section>\n        </div>\n    )\n}\nexport default SecurityPage"]},"metadata":{},"sourceType":"module"}