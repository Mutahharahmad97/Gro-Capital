{"ast":null,"code":"import { baseUrl } from \"../util/baseUrl\";\nimport { ADD_BUSINESS_INFORMATION_URL } from \"../util/urls\";\n\nconst addBusinessInformation = async data => {\n  try {\n    const response = await fetch(baseUrl() + ADD_BUSINESS_INFORMATION_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Token ${localStorage.getItem(\"token\")}`\n      },\n      body: JSON.stringify({\n        corporate_name: data.CorporateName,\n        business_as: data.BusinessAs,\n        sic_code: data.SicCode,\n        date_of_establishment: data.DateOfEstablishment,\n        type_of_ownership: data.TypeofOwnership,\n        duns: data.DUNS,\n        business_physical_address: data.BusinessPhysicalAddress,\n        city: data.City,\n        state: data.State,\n        zip: data.Zip,\n        business_phone: data.BusinessPhone,\n        extenstion: data.Extension,\n        ein: data.EIN\n      })\n    });\n\n    if (response.ok) {\n      return {\n        success: true,\n        message: \"success\"\n      };\n    } else if (response.status === 401) {\n      const error = await response.json();\n      return {\n        success: false,\n        message: error.detail\n      };\n    } else {\n      const error = await response.json();\n      return {\n        success: false,\n        message: '\"' + Object.keys(error)[0] + '\": ' + error[Object.keys(error)[0]]\n      };\n    }\n  } catch (e) {\n    console.log(e);\n    return {\n      success: false,\n      message: \"API Error\"\n    };\n  }\n};\n\nexport default addBusinessInformation;","map":{"version":3,"sources":["/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/Latest/grocapitalapp-react/src/services/Forms/addBusinessInformation.js"],"names":["baseUrl","ADD_BUSINESS_INFORMATION_URL","addBusinessInformation","data","response","fetch","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","corporate_name","CorporateName","business_as","BusinessAs","sic_code","SicCode","date_of_establishment","DateOfEstablishment","type_of_ownership","TypeofOwnership","duns","DUNS","business_physical_address","BusinessPhysicalAddress","city","City","state","State","zip","Zip","business_phone","BusinessPhone","extenstion","Extension","ein","EIN","ok","success","message","status","error","json","detail","Object","keys","e","console","log"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAASC,4BAAT,QAA6C,cAA7C;;AAEA,MAAMC,sBAAsB,GAAG,MAAOC,IAAP,IAAgB;AAC7C,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,KAAKC,4BAAb,EAA2C;AACrEK,MAAAA,MAAM,EAAE,MAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,SAAQC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF/C,OAF4D;AAMrEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,cAAc,EAAEX,IAAI,CAACY,aADF;AAEnBC,QAAAA,WAAW,EAAEb,IAAI,CAACc,UAFC;AAGnBC,QAAAA,QAAQ,EAAEf,IAAI,CAACgB,OAHI;AAInBC,QAAAA,qBAAqB,EAAEjB,IAAI,CAACkB,mBAJT;AAKnBC,QAAAA,iBAAiB,EAAEnB,IAAI,CAACoB,eALL;AAMnBC,QAAAA,IAAI,EAAErB,IAAI,CAACsB,IANQ;AAOnBC,QAAAA,yBAAyB,EAAEvB,IAAI,CAACwB,uBAPb;AAQnBC,QAAAA,IAAI,EAAEzB,IAAI,CAAC0B,IARQ;AASnBC,QAAAA,KAAK,EAAE3B,IAAI,CAAC4B,KATO;AAUnBC,QAAAA,GAAG,EAAE7B,IAAI,CAAC8B,GAVS;AAWnBC,QAAAA,cAAc,EAAE/B,IAAI,CAACgC,aAXF;AAYnBC,QAAAA,UAAU,EAAEjC,IAAI,CAACkC,SAZE;AAanBC,QAAAA,GAAG,EAAEnC,IAAI,CAACoC;AAbS,OAAf;AAN+D,KAA3C,CAA5B;;AAuBA,QAAInC,QAAQ,CAACoC,EAAb,EAAiB;AACf,aAAO;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,OAAO,EAAE;AAA1B,OAAP;AACD,KAFD,MAEO,IAAItC,QAAQ,CAACuC,MAAT,KAAoB,GAAxB,EAA6B;AAClC,YAAMC,KAAK,GAAG,MAAMxC,QAAQ,CAACyC,IAAT,EAApB;AACA,aAAO;AAAEJ,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAEE,KAAK,CAACE;AAAjC,OAAP;AACD,KAHM,MAGA;AACL,YAAMF,KAAK,GAAG,MAAMxC,QAAQ,CAACyC,IAAT,EAApB;AACA,aAAO;AAAEJ,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,OAAO,EAAE,MAAMK,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmB,CAAnB,CAAN,GAA8B,KAA9B,GAAsCA,KAAK,CAACG,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmB,CAAnB,CAAD;AAAtE,OAAP;AACD;AACF,GAjCD,CAiCE,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAO;AAAER,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAAP;AACD;AACF,CAtCD;;AAwCA,eAAexC,sBAAf","sourcesContent":["import { baseUrl } from \"../util/baseUrl\";\nimport { ADD_BUSINESS_INFORMATION_URL } from \"../util/urls\";\n\nconst addBusinessInformation = async (data) => {\n  try {\n    const response = await fetch(baseUrl() + ADD_BUSINESS_INFORMATION_URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Token ${localStorage.getItem(\"token\")}`,\n      },\n      body: JSON.stringify({\n        corporate_name: data.CorporateName,\n        business_as: data.BusinessAs,\n        sic_code: data.SicCode,\n        date_of_establishment: data.DateOfEstablishment,\n        type_of_ownership: data.TypeofOwnership,\n        duns: data.DUNS,\n        business_physical_address: data.BusinessPhysicalAddress,\n        city: data.City,\n        state: data.State,\n        zip: data.Zip,\n        business_phone: data.BusinessPhone,\n        extenstion: data.Extension,\n        ein: data.EIN\n      }),\n    });\n\n    if (response.ok) {\n      return { success: true, message: \"success\" };\n    } else if (response.status === 401) {\n      const error = await response.json();\n      return { success: false, message: error.detail };\n    } else {\n      const error = await response.json();\n      return { success: false, message: '\"' + Object.keys(error)[0] + '\": ' + error[Object.keys(error)[0]]};\n    }\n  } catch (e) {\n    console.log(e);\n    return { success: false, message: \"API Error\" };\n  }\n};\n\nexport default addBusinessInformation;\n"]},"metadata":{},"sourceType":"module"}