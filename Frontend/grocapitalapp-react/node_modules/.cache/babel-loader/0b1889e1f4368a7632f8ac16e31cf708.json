{"ast":null,"code":"export const validations = [{\n  name: \"FName\",\n  validationRule: /^[A-Za-z]+$/,\n  message: \"First Name can only contain alphabets without spaces\"\n}, {\n  name: \"LName\",\n  validationRule: /^[A-Za-z]+$/,\n  message: \"Last Name can only contain alphabets without spaces\"\n}, {\n  name: \"Email\",\n  validationRule: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z-]+(?:\\.[a-zA-Z-]+)*$/,\n  message: \"Email format invalid\"\n}, {\n  name: \"SocialSecurityNumber\",\n  validationRule: /^\\d{3}-?\\d{2}-?\\d{4}$/,\n  message: \"Social Security Number format invalid\"\n}, {\n  name: \"DrivingLicense\",\n  validationRule: /^\\d{10}$/,\n  message: \"Diriving License Number format invalid\"\n}, {\n  name: \"Birthday\",\n  validationRule: /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\n  message: \"Date format (MM/DD/YYYY)\"\n}, {\n  name: \"CorporateName\",\n  validationRule: /^[A-Za-z + ?]+$/,\n  message: \"Company Name can only contain alphabets\"\n}, {\n  name: \"EIN\",\n  validationRule: /^\\d{9}$/,\n  message: \"Must contain 9 numbers\"\n}, {\n  name: \"DUNS\",\n  validationRule: /^\\d{0,9}$/,\n  message: \"Must contain 9 numbers\"\n}, {\n  name: \"Experian\",\n  validationRule: /^(\\d{3})\\/(\\d{3})$/,\n  message: \"Format: ***/***\"\n}, {\n  name: \"BusinessPhysicalAddress\",\n  validationRule: /^\\s*\\S+(?:\\s+\\S+){2}$/,\n  message: \"Physical Address format not valid\"\n}, {\n  name: \"City\",\n  validationRule: /^[A-Za-z + ?]+$/,\n  message: \"City can only contain alphabets\"\n}, {\n  name: \"State\",\n  validationRule: /^[A-Za-z + ?]+$/,\n  message: \"State can only contain alphabets\"\n}, {\n  name: \"Zip\",\n  validationRule: /^\\d{5}$/,\n  message: \"Must contain 5 numbers\"\n}, {\n  name: \"Monetary Value\",\n  validationRule: /^\\d*$/,\n  message: \"Type a realistic amount in digits\"\n}];","map":{"version":3,"sources":["/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/components/Cards/json/validations.js"],"names":["validations","name","validationRule","message"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,CACzB;AACEC,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,cAAc,EAAE,aAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CADyB,EAMzB;AACEF,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,cAAc,EAAE,aAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CANyB,EAWzB;AACEF,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,cAAc,EAAE,gEAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAXyB,EAgBzB;AACEF,EAAAA,IAAI,EAAE,sBADR;AAEEC,EAAAA,cAAc,EAAE,uBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAhByB,EAqBzB;AACEF,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,cAAc,EAAE,UAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CArByB,EA0BzB;AACEF,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,cAAc,EAAE,6BAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CA1ByB,EAgCzB;AACEF,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,cAAc,EAAE,iBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAhCyB,EAqCzB;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,cAAc,EAAE,SAA/B;AAA0CC,EAAAA,OAAO,EAAE;AAAnD,CArCyB,EAsCzB;AACEF,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,cAAc,EAAE,WAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAtCyB,EA2CzB;AACEF,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,cAAc,EAAE,oBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CA3CyB,EAgDzB;AACEF,EAAAA,IAAI,EAAE,yBADR;AAEEC,EAAAA,cAAc,EAAE,uBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAhDyB,EAqDzB;AACEF,EAAAA,IAAI,EAAE,MADR;AAEEC,EAAAA,cAAc,EAAE,iBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CArDyB,EA0DzB;AACEF,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,cAAc,EAAE,iBAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CA1DyB,EA+DzB;AAAEF,EAAAA,IAAI,EAAE,KAAR;AACEC,EAAAA,cAAc,EAAE,SADlB;AAEEC,EAAAA,OAAO,EAAE;AAFX,CA/DyB,EAmEzB;AACEF,EAAAA,IAAI,EAAE,gBADR;AAEEC,EAAAA,cAAc,EAAE,OAFlB;AAGEC,EAAAA,OAAO,EAAE;AAHX,CAnEyB,CAApB","sourcesContent":["export const validations = [\n  {\n    name: \"FName\",\n    validationRule: /^[A-Za-z]+$/,\n    message: \"First Name can only contain alphabets without spaces\",\n  },\n  {\n    name: \"LName\",\n    validationRule: /^[A-Za-z]+$/,\n    message: \"Last Name can only contain alphabets without spaces\",\n  },\n  {\n    name: \"Email\",\n    validationRule: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z-]+(?:\\.[a-zA-Z-]+)*$/,\n    message: \"Email format invalid\",\n  },\n  {\n    name: \"SocialSecurityNumber\",\n    validationRule: /^\\d{3}-?\\d{2}-?\\d{4}$/,\n    message: \"Social Security Number format invalid\",\n  },\n  {\n    name: \"DrivingLicense\",\n    validationRule: /^\\d{10}$/,\n    message: \"Diriving License Number format invalid\",\n  },\n  {\n    name: \"Birthday\",\n    validationRule: /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\n    message: \"Date format (MM/DD/YYYY)\",\n  },\n\n  {\n    name: \"CorporateName\",\n    validationRule: /^[A-Za-z + ?]+$/,\n    message: \"Company Name can only contain alphabets\",\n  },\n  { name: \"EIN\", validationRule: /^\\d{9}$/, message: \"Must contain 9 numbers\" },\n  {\n    name: \"DUNS\",\n    validationRule: /^\\d{0,9}$/,\n    message: \"Must contain 9 numbers\",\n  },\n  {\n    name: \"Experian\",\n    validationRule: /^(\\d{3})\\/(\\d{3})$/,\n    message: \"Format: ***/***\",\n  },\n  {\n    name: \"BusinessPhysicalAddress\",\n    validationRule: /^\\s*\\S+(?:\\s+\\S+){2}$/,\n    message: \"Physical Address format not valid\",\n  },\n  {\n    name: \"City\",\n    validationRule: /^[A-Za-z + ?]+$/,\n    message: \"City can only contain alphabets\",\n  },\n  {\n    name: \"State\",\n    validationRule: /^[A-Za-z + ?]+$/,\n    message: \"State can only contain alphabets\",\n  },\n  { name: \"Zip\", \n    validationRule: /^\\d{5}$/, \n    message: \"Must contain 5 numbers\" \n  },\n  {\n    name: \"Monetary Value\",\n    validationRule: /^\\d*$/,\n    message: \"Type a realistic amount in digits\",\n  },\n];\n"]},"metadata":{},"sourceType":"module"}