{"ast":null,"code":"var _jsxFileName = \"/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/services/Plaid/PlaidAuthDataAPI.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useCallback, useState } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport { plaidBaseUrl } from \"../util/baseUrl.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PlaidAuthDataAPI = props => {\n  _s();\n\n  const [accessToken, setAccessToken] = useState(\"\");\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0\n  });\n  const generateToken = useCallback(async () => {\n    const path = plaidBaseUrl() + \"create-link-token/\";\n    const response = await fetch(path, {\n      method: \"POST\"\n    });\n\n    if (!response.ok) {\n      return;\n    }\n\n    const data = await response.json();\n\n    if (data) {\n      localStorage.setItem(\"link_token\", data.link_token);\n      setAccessToken(data.link_token);\n    }\n  }, []);\n  useEffect(() => {\n    generateToken();\n  }, [generateToken]);\n  const onSuccess = useCallback(public_token => {\n    const getAuth = async () => {\n      const response = await fetch(plaidBaseUrl() + \"plaid-auth/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\"\n        },\n        body: `public_token=${public_token}`\n      });\n\n      if (!response.ok) {\n        return;\n      }\n\n      const data = await response.json();\n      const authData = data.numbers.ach.map(achNumbers => {\n        const account = data.accounts.filter(a => {\n          return a.account_id === achNumbers.account_id;\n        })[0];\n        const obj = {\n          name: account.name,\n          balance: formatter.format(account.balances.available) || formatter.format(account.balances.current),\n          account_id: achNumbers.account_id,\n          account_number: achNumbers.account,\n          routing_number: achNumbers.routing\n        };\n        return obj;\n      });\n      const add_bank_auth_data = await fetch(plaidBaseUrl() + \"banking-auth/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${localStorage.getItem(\"token\")}`\n        },\n        body: JSON.stringify(authData)\n      });\n      const res = await add_bank_auth_data.json();\n      console.log(res);\n    };\n\n    getAuth().then(() => window.location.reload());\n  }, []);\n  const config = {\n    token: accessToken,\n    onSuccess\n  };\n  const {\n    open\n  } = usePlaidLink(config);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => open(),\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaidAuthDataAPI, \"qUSvXM3x28i8Xr5/vXRXYD4nczo=\", false, function () {\n  return [usePlaidLink];\n});\n\n_c = PlaidAuthDataAPI;\nexport default PlaidAuthDataAPI;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaidAuthDataAPI\");","map":{"version":3,"sources":["/home/mutahharahmadpersonal/Development/Gro Pakistan/Current/grocapitalapp-react/src/services/Plaid/PlaidAuthDataAPI.jsx"],"names":["useEffect","useCallback","useState","usePlaidLink","plaidBaseUrl","PlaidAuthDataAPI","props","accessToken","setAccessToken","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","generateToken","path","response","fetch","method","ok","data","json","localStorage","setItem","link_token","onSuccess","public_token","getAuth","headers","body","authData","numbers","ach","map","achNumbers","account","accounts","filter","a","account_id","obj","name","balance","format","balances","available","current","account_number","routing_number","routing","add_bank_auth_data","Authorization","getItem","JSON","stringify","res","console","log","then","window","location","reload","config","token","open","children"],"mappings":"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","sourcesContent":["import { useEffect, useCallback, useState } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport { plaidBaseUrl } from \"../util/baseUrl.js\";\n\nconst PlaidAuthDataAPI = (props) => {\n  const [accessToken, setAccessToken] = useState(\"\");\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    minimumFractionDigits: 0,\n  });\n\n  const generateToken = useCallback(async () => {\n    const path = plaidBaseUrl() + \"create-link-token/\";\n    const response = await fetch(path, {\n      method: \"POST\",\n    });\n    if (!response.ok) {\n      return;\n    }\n    const data = await response.json();\n    if (data) {\n      localStorage.setItem(\"link_token\", data.link_token);\n      setAccessToken(data.link_token);\n    }\n  }, []);\n\n  useEffect(() => {\n    generateToken();\n  }, [generateToken]);\n\n  const onSuccess = useCallback((public_token) => {\n    const getAuth = async () => {\n      const response = await fetch(plaidBaseUrl() + \"plaid-auth/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n        },\n        body: `public_token=${public_token}`,\n      });\n      if (!response.ok) {\n        return;\n      }\n      const data = await response.json();\n      const authData = data.numbers.ach.map((achNumbers) => {\n        const account = data.accounts.filter((a) => {\n          return a.account_id === achNumbers.account_id;\n        })[0];\n        const obj = {\n          name: account.name,\n          balance:\n            formatter.format(account.balances.available) ||\n            formatter.format(account.balances.current),\n          account_id: achNumbers.account_id,\n          account_number: achNumbers.account,\n          routing_number: achNumbers.routing,\n        };\n        return obj;\n      });\n      const add_bank_auth_data = await fetch(plaidBaseUrl() + \"banking-auth/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Token ${localStorage.getItem(\"token\")}`,\n        },\n        body: JSON.stringify(authData),\n      });\n\n      const res = await add_bank_auth_data.json();\n      console.log(res);\n    };\n    getAuth().then(() => window.location.reload());\n  }, []);\n\n  const config = {\n    token: accessToken,\n    onSuccess,\n  };\n\n  const { open } = usePlaidLink(config);\n\n  return (\n    <div onClick={() => open()}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default PlaidAuthDataAPI;\n"]},"metadata":{},"sourceType":"module"}